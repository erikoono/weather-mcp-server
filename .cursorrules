# Weather MCP Server - Cursor Rules

## プロジェクト概要
このプロジェクトは、OpenWeatherMap APIを使用して天気情報を提供するMCPサーバーです。

## コーディング規約

### TypeScript
- 厳密な型チェックを有効にする
- インターフェースとタイプを適切に定義する
- async/awaitを使用して非同期処理を記述する
- エラーハンドリングを適切に実装する

### ファイル構造
```
src/
├── index.ts              # メインエントリーポイント
├── services/             # ビジネスロジック
│   └── weather.ts        # 天気情報サービス
├── types/                # 型定義
├── utils/                # ユーティリティ関数
└── config/               # 設定ファイル
```

### 命名規則
- ファイル名: kebab-case (例: weather-service.ts)
- クラス名: PascalCase (例: WeatherService)
- 関数名: camelCase (例: getCurrentWeather)
- 定数名: UPPER_SNAKE_CASE (例: API_BASE_URL)

### コメント
- 複雑なロジックには日本語でコメントを記述
- JSDocスタイルで関数の説明を記述
- TODOコメントには期限や担当者を明記

## 開発ルール

### エラーハンドリング
- try-catch文で適切にエラーをキャッチ
- ユーザーフレンドリーなエラーメッセージを提供
- ログ出力でデバッグ情報を記録

### API設計
- RESTful APIの原則に従う
- 一貫したレスポンス形式を使用
- 適切なHTTPステータスコードを返す

### 環境変数
- 機密情報は.envファイルで管理
- 環境変数の型定義を提供
- デフォルト値を適切に設定

### テスト
- 重要な機能にはユニットテストを記述
- モックを使用して外部APIをテスト
- テストカバレッジを維持する

## コミット規約

### コミットメッセージ
```
<type>(<scope>): <description>

[optional body]

[optional footer]
```

### タイプ
- feat: 新機能
- fix: バグ修正
- docs: ドキュメント更新
- style: コードスタイル修正
- refactor: リファクタリング
- test: テスト追加・修正
- chore: その他の変更

### 例
```
feat(weather): 天気予報機能を追加
fix(api): エラーハンドリングを修正
docs(readme): セットアップ手順を更新
```

## セキュリティ

### APIキー管理
- APIキーは.envファイルで管理
- .envファイルをGitにコミットしない
- 本番環境では環境変数を使用

### 入力検証
- ユーザー入力の検証を実装
- SQLインジェクション対策
- XSS対策

## パフォーマンス

### 最適化
- 不要なAPI呼び出しを避ける
- キャッシュを適切に使用
- 非同期処理を効率的に実装

### 監視
- レスポンス時間を監視
- エラー率を追跡
- リソース使用量を確認

## ドキュメント

### README
- プロジェクトの概要
- セットアップ手順
- API仕様
- 使用例

### コードコメント
- 複雑なロジックの説明
- API仕様の詳細
- 設定項目の説明

## デプロイメント

### 環境
- 開発環境: localhost:3000
- 本番環境: 適切なホスティングサービス

### ビルド
- TypeScriptのコンパイル
- 依存関係のインストール
- 環境変数の設定

## トラブルシューティング

### よくある問題
1. APIキーが設定されていない
2. 依存関係のインストールエラー
3. TypeScriptのコンパイルエラー
4. 環境変数の読み込みエラー

### 解決方法
- .envファイルの確認
- npm installの実行
- TypeScriptの型チェック
- 環境変数の設定確認 